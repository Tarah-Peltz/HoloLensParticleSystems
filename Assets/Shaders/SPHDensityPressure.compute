//This is based upon the work from this GitHub:https://github.com/multiprecision/sph_opengl.git
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Particle
{
	float4 positionAndDensity;
	float4 velocityAndPressure;
	float4 force;
};


// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

// Variables passed from the CPU
float _time;
float _restingDensity;
// Mass = Density * Volume
float _particleMass;
float _smoothingLength;
float _stiffness;
int _numberOfParticles;

[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float pi = 3.1415927410125732421875f;
	float density_sum = 0.0f;
	for (uint i = 0; i < _numberOfParticles; i++) {
		float2 delta = particleBuffer[id.x].positionAndDensity.xy - particleBuffer[i].positionAndDensity.xy;
		float r = length(delta);
		if (r < _smoothingLength) //Can I add a UNITY_FLATTEN here?
		{
			density_sum += _particleMass * /* poly6 kernel */ 315.f * pow(_smoothingLength * _smoothingLength - r * r, 3) / (64.f * pi * pow(_smoothingLength, 9));
		}
	}
	particleBuffer[id.x].positionAndDensity.w = density_sum;
	particleBuffer[id.x].velocityAndPressure.w = max(_stiffness * (density_sum - _restingDensity), 0.f);
}
