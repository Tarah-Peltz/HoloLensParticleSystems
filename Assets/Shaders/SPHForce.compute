//This is based upon the work from this GitHub:https://github.com/multiprecision/sph_opengl.git
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Particle
{
	float4 positionAndDensity;
	float4 velocityAndPressure;
	float4 forceAndIsStatic;
};


// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

// Variables passed from the CPU
float _time;
float _particleMass;
float _smoothingLength;
int _numberOfParticles;
float _viscosity;




[numthreads(8, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	if (particleBuffer[id.x].forceAndIsStatic.w == 0.0) {
		float pi = 3.1415927410125732421875f;
		float3 G = float3(0, -98000., 0);
		float3 pressureForce = float3(0, 0, 0);
		float3 viscosityForce = float3(0, 0, 0);
		for (uint i = 0; i < _numberOfParticles; i++) {
			if (id.x == i) { //This line might be a problem. Don't all the particles have to check for this even though it only acts on one of them?
				continue; //This forces it to jump to the next iteration of the for loop. Can we eliminate branching here?
			}
			float3 delta = particleBuffer[id.x].positionAndDensity.xyz - particleBuffer[i].positionAndDensity.xyz;
			float r = length(delta);
			if (r < _smoothingLength) {

				pressureForce -= _particleMass * (particleBuffer[id.x].velocityAndPressure.w + particleBuffer[i].velocityAndPressure.w)
					/ (2.0f * particleBuffer[i].positionAndDensity.w) * -45.f / (pi * pow(_smoothingLength, 6))
					* pow(_smoothingLength - r, 2) * normalize(delta);

				viscosityForce += _particleMass * (particleBuffer[i].velocityAndPressure.xyz - particleBuffer[id.x].velocityAndPressure.xyz)
					/ particleBuffer[i].positionAndDensity.w * 45.f / (pi * pow(_smoothingLength, 6))
					* (_smoothingLength - r);
				// Laplacian of viscosity kernel
			}
		}

		viscosityForce *= _viscosity;
		float3 externalForce = particleBuffer[id.x].positionAndDensity.w * G;
		particleBuffer[id.x].forceAndIsStatic.xyz = pressureForce + viscosityForce + externalForce;
	}
}